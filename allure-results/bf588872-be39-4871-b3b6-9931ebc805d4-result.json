{"name": "test_add_to_cart[chrome]", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nfrom disconnected: not connected to DevTools\n  (Session info: chrome=141.0.7390.108); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidsessionidexception\nStacktrace:\n\tGetHandleVerifier [0x0x7ff6f175e8e5+80021]\n\tGetHandleVerifier [0x0x7ff6f175e940+80112]\n\t(No symbol) [0x0x7ff6f14e060f]\n\t(No symbol) [0x0x7ff6f14cc145]\n\t(No symbol) [0x0x7ff6f14f177a]\n\t(No symbol) [0x0x7ff6f1568b06]\n\t(No symbol) [0x0x7ff6f1588fa2]\n\t(No symbol) [0x0x7ff6f1561003]\n\t(No symbol) [0x0x7ff6f15295d1]\n\t(No symbol) [0x0x7ff6f152a3f3]\n\tGetHandleVerifier [0x0x7ff6f1a1dc7d+2960429]\n\tGetHandleVerifier [0x0x7ff6f1a17f3a+2936554]\n\tGetHandleVerifier [0x0x7ff6f1a38977+3070247]\n\tGetHandleVerifier [0x0x7ff6f17783ce+185214]\n\tGetHandleVerifier [0x0x7ff6f177fe1f+216527]\n\tGetHandleVerifier [0x0x7ff6f1767b24+117460]\n\tGetHandleVerifier [0x0x7ff6f1767cdf+117903]\n\tGetHandleVerifier [0x0x7ff6f174dbb8+11112]\n\tBaseThreadInitThunk [0x0x7ffe3691e8d7+23]\n\tRtlUserThreadStart [0x0x7ffe3754c53c+44]", "trace": "browser_name = 'chrome'\n\n    @pytest.mark.parametrize(\"browser_name\", [\"chrome\", \"edge\", \"firefox\"])\n    def test_add_to_cart(browser_name):\n        driver = DriverFactory.get_driver(browser_name=browser_name, headless=False)\n        wait = WebDriverWait(driver, 10)\n    \n        driver.get(\"https://www.demoblaze.com/\")\n    \n        # Click on Samsung Galaxy S6\n>       wait.until(EC.element_to_be_clickable((By.LINK_TEXT, \"Samsung galaxy s6\"))).click()\n        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\test_add_to_cart.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:129: in until\n    value = method(self._driver)\n            ^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\expected_conditions.py:624: in _predicate\n    target = driver.find_element(*target)  # grab element at locator\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:926: in find_element\n    return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:458: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002180F4C8EC0>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"invalid session id\",\"message\":\"invalid session id: session deleted as the...ff6f174dbb8+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffe3691e8d7+23]\\\\n\\\\tRtlUserThreadStart [0x0x7ffe3754c53c+44]\\\\n\"}}'}\n\n    def check_response(self, response: dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                try:\n                    value = json.loads(value_json)\n                    if isinstance(value, dict):\n                        if len(value) == 1:\n                            value = value[\"value\"]\n                        status = value.get(\"error\", None)\n                        if not status:\n                            status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                            message = value.get(\"value\") or value.get(\"message\")\n                            if not isinstance(message, str):\n                                value = message\n                                message = message.get(\"message\") if isinstance(message, dict) else None\n                        else:\n                            message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSessionIdException: Message: invalid session id: session deleted as the browser has closed the connection\nE       from disconnected: not connected to DevTools\nE         (Session info: chrome=141.0.7390.108); For documentation on this error, please visit: https://www.selenium.dev/documentation/webdriver/troubleshooting/errors#invalidsessionidexception\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff6f175e8e5+80021]\nE       \tGetHandleVerifier [0x0x7ff6f175e940+80112]\nE       \t(No symbol) [0x0x7ff6f14e060f]\nE       \t(No symbol) [0x0x7ff6f14cc145]\nE       \t(No symbol) [0x0x7ff6f14f177a]\nE       \t(No symbol) [0x0x7ff6f1568b06]\nE       \t(No symbol) [0x0x7ff6f1588fa2]\nE       \t(No symbol) [0x0x7ff6f1561003]\nE       \t(No symbol) [0x0x7ff6f15295d1]\nE       \t(No symbol) [0x0x7ff6f152a3f3]\nE       \tGetHandleVerifier [0x0x7ff6f1a1dc7d+2960429]\nE       \tGetHandleVerifier [0x0x7ff6f1a17f3a+2936554]\nE       \tGetHandleVerifier [0x0x7ff6f1a38977+3070247]\nE       \tGetHandleVerifier [0x0x7ff6f17783ce+185214]\nE       \tGetHandleVerifier [0x0x7ff6f177fe1f+216527]\nE       \tGetHandleVerifier [0x0x7ff6f1767b24+117460]\nE       \tGetHandleVerifier [0x0x7ff6f1767cdf+117903]\nE       \tGetHandleVerifier [0x0x7ff6f174dbb8+11112]\nE       \tBaseThreadInitThunk [0x0x7ffe3691e8d7+23]\nE       \tRtlUserThreadStart [0x0x7ffe3754c53c+44]\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:232: InvalidSessionIdException"}, "parameters": [{"name": "browser_name", "value": "'chrome'"}], "start": 1761122610723, "stop": 1761122656208, "uuid": "a5198939-7f65-4583-a361-b525763e6d3d", "historyId": "9d1b0b1d2d0310ca0df4ca8f178a6ba0", "testCaseId": "a65fce4e70cb5afd8c0f8bcce4c3e27a", "fullName": "tests.test_add_to_cart#test_add_to_cart", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_add_to_cart"}, {"name": "host", "value": "ASCENDI-1GUJSNA"}, {"name": "thread", "value": "13564-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_add_to_cart"}], "titlePath": ["tests", "test_add_to_cart.py"]}